(define (abs n) (cond (( < n 0 ) (- 0 n)) n )) 
( abs -9)
( abs 9)
(define (square n) (* n n))
(define (average x y) ( / (+ x y) 2 ))  
(define (improve guess x) (average guess (/ x guess)))    
(define (good-enough? guess x) ( < ( abs ( - (square guess) x)) 0.00000000000001))  
(define (sq-iter guess x) (if (good-enough? guess x) guess (sq-iter (improve guess x ) x )))    
( define (sqrt x) ( sq-iter 1.00000000000 x))
(sqrt 9) 
(sqrt 2) 
(sqrt (sqrt (sqrt 9) ))
(define (square n) (* n n))
(define (fib n)
  (fib-iter 1 0 n))

(define (fib-iter a b count)
  (if (= count 0)
      b
      (fib-iter (+ a b) a (- count 1))))
(fib 30)           
(define ( A x y) 
    (cond 
        (( = y 0 ) 0 )
        (( = x 0 ) (* 2 y))
        ((= y 1) 2 )
        ( 1 (A ( - x 1) ( A x ( - y 1) ) ) )
    )
)    
( A 1 10) (A 2 4) (A 3 3)
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

(A 1 10) (A 2 4) (A 3 3)

(define (f n) (A 0 n))

(define (g n) (A 1 n))

(define (h n) (A 2 n))

(define (k n) (* 5 n n))

(define (tx x)  
    (cond 
        (( = x 0 ) 1) 
        2 
    )
)      
(tx 3) (tx 0)
(define (count-change amount)
  (cc amount 5))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (= kinds-of-coins 0)) 0)
        (else (+ (cc amount
                     (- kinds-of-coins 1))
                 (cc (- amount
                        (first-denomination kinds-of-coins))
                     kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))

(count-change 100)            
(fib 30)        
;;; (define (remainder b a ) ( if ( mod b a) true false ))
(define (divides? a b)
  (= (modulo b a) 0))
  ;;; (= (remainder b a) 0))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (prime? n)
   ( if ( = (= n (smallest-divisor n))  1) ( 'true) ('false)))
   ;;; ( if ( = (= n (smallest-divisor n))  1) ( '#t ) ('#f))
(define (sd n) (smallest-divisor n))       
(prime? 13)            
(prime? 100) 
(define (p? n) (prime? n))
(define (d? n) (sd n))
