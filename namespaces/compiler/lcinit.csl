cverbosity 1 =
typecheckOff
Int Lisp
(( lambda ( x y ) ( + x y ) ) 3 4 ) 
(define yfac (lambda (yy n) (if* (< n 2) 1 (* n (yy yy (- n 1))))))
(yfac yfac 10) nl
(define yfacc (lambda (yyy n1) (if* (< n1 2) (1) (* n1 (yyy yyy (- n1 1)))))) 
(yfacc yfacc 10) nl //pause
(yfacc yfacc 7) nl 
(define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
"\nfibc 20 = " ps
(fibc 20)
#if lcOff doLispTest @ lcOn
//bnOn
(define (abs n) (cond (( < n 0 ) (- 0 n)) n )) ( abs -9)
(define (square n) (* n n))
(define (average x y) ( / (+ x y) 2 ))  
(define (improve guess x) (average guess (/ x guess)))    
(define (good-enough? guess x) ( < ( abs ( - (square guess) x)) 0.001))  
(define (sq-iter guess x) (if* (good-enough? guess x) guess (sq-iter (improve guess x ) x )))    
( define (sqrt x) ( sq-iter 1.0 x))
//(sqrt 9) 
//bnOff
(define ( A x y) 
    (cond 
        (( = y 0 ) 0 )
        (( = x 0 ) (* 2 y))
        ((= y 1) 2 )
        ( 1 (A ( - x 1) ( A x ( - y 1) ) ) )
    )
)    
( A 1 10) (A 2 4) (A 3 3)
(define (tx x)  
    (cond 
        (( = x 0 ) 1) 
        2 
    )
)      
(tx 3) (tx 0)
(define (count-change amount)
  (cc amount 5))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (= kinds-of-coins 0)) 0)
        (else (+ (cc amount
                     (- kinds-of-coins 1))
                 (cc (- amount
                        (first-denomination kinds-of-coins))
                     kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))

(count-change 100)
            
lispOff
doLispTest 0 =
lcOn        
#endif
