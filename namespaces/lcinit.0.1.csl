(set verbosity 1)
#if 1
(( lambda ( x y ) ( + x y ) ) 3 4 ) 
//(ld:) 
(define yfac (lambda (yy n) (if (< n 2) 1 (* n (yy yy (- n 1)))))) 
(yfac yfac 10) nl
(define yfacc (lambda (yyy n1) (if (< n1 2) (1) (* n1 (yyy yyy (- n1 1)))))) 
(yfacc yfacc 20) 
(yfacc yfacc 7) nl 
//pause
(definec fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) //(;ld)
pwi fibc
"\nfibc 30 = " ps
(fibc 30)

(definec (fibc1 n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2)))))
//d: (define fibc1 ( lambda ( n ) (ifc (< n 2) (n) ( + (fibc1 (- n 1)) (fibc1 (- n 2)) ) ) ) )
(definec fibc2 ( lambda ( n ) (ifElse (< n 2) n ( + (fibc2 (- n 1)) (fibc2 (- n 2)) ) ) ) )
pwi fibc1
"\nfibc1 30 = " ps
(fibc1 30) 
(fibc2 30) 
//pause

#if 1 //doLispTest @ // from sicp
bnOn
(define (abs n) (cond (( < n 0 ) (- 0 n)) n )) 
( abs -9)
( abs 9)
(define (square n) (* n n))
(define (average x y) ( / (+ x y) 2 ))  
(define (improve guess x) (average guess (/ x guess)))    
(define (good-enough? guess x) ( < ( abs ( - (square guess) x)) 0.000000000001))  
 
(define (sq-iter guess x) (if (good-enough? guess x) guess (sq-iter (improve guess x ) x )))    
( define (sqrt x) ( sq-iter 1.00000000000 x))
d: (sqrt 9) 
(sqrt 2) 
(sqrt (sqrt (sqrt 9) ))
bnOff
#endif

(define (square n) (* n n))
#if 1
(define (fiba n)
  (fib-iter 1 0 n))

(define (fib-iter a b count)
  (if (= count 0)
      b
      (fib-iter (+ a b) a (- count 1))))
"\nfiba 30 =" ps (fiba 30)
//(fiba 30)
// (csl_return)    
#endif   
     
(define (count-change amount)                                                                                                                         
  (cc amount 5)) 
(define (cc amount kinds-of-coins)                                                                                                                        
  (cond ((= amount 0) 1)                                                                                                                                  
        ((or (< amount 0) (= kinds-of-coins 0)) 0)                                                                                                        
        (else (+ (cc amount                                                                                                                               
                     (- kinds-of-coins 1))                                                                                                                
                 (cc (- amount                                                                                                                            
                        (first-denomination kinds-of-coins))
                     kinds-of-coins)))))
 
(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50))) 
"\n (count-change 100) =" ps (count-change 100)     
(csl_return)       
2//(;ld)
(define ( A x y) 
    (cond 
        (( = y 0 ) 0 )
        (( = x 0 ) (* 2 y))
        ((= y 1) 2 )
        ( 1 (A ( - x 1) ( A x ( - y 1) ) ) )
    )
)    
( A 1 10) (A 2 4) (A 3 3)
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

(A 1 10) (A 2 4) (A 3 3)

(define (f n) (A 0 n))

(define (g n) (A 1 n))

(define (h n) (A 2 n))

(define (k n) (* 5 n n))

(define (tx x)  
    (cond 
        (( = x 0 ) 1) 
        2 
    )
)      
(tx 3) (tx 0)
//(fib 30)        
;;; (define (remainder b a ) ( if ( mod b a) true false ))
;;; (bnOn)    
(define (divides? a b)
  (= (modulo b a) 0))
  ;;; (= (remainder b a) 0))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (prime? n)
   ( if ( = (= n (smallest-divisor n))  1) ( 'true) ('false)))
   ;;; ( if ( = (= n (smallest-divisor n))  1) ( '#t ) ('#f))
(define (sd n) (smallest-divisor n))       
(prime? 13)            
(prime? 100) 
(define (p? n) (prime? n))
(define (d? n) (sd n))
;;; SECTION 1.2.5
//"\nfib 30 =" ps (fib 30)
#endif    
#endif
"\ncsl : scheme/lisp : type \'x\' or \'exit\' or \'bye\' to exit ...\n" ps

#if 0 //lisp
(defun (fib n)
  (fib-iter 1 0 n))

(defun (fib-iter a b count)
  (if (= count 0)
      b
      (fib-iter (+ a b) a (- count 1))))
(fib 30)     
(defun (substt x y z )  
    ( cond ((atom z)  
            (cond ( (eq z y) x )
                ( 't z )))
        ( 't 
            ( cons ( substt x y ( car z) ) 
                      ( substt x y ( cdr z ) )
            )
        )
    )
 )
(substt 'm 'b  '(a b ( a b c ) d))
(defun (count-change amount)                                                                                                                         
  (cc amount 5)) 
(defun (cc amount kinds-of-coins)                                                                                                                        
  (cond ((= amount 0) 1)                                                                                                                                  
        ((or (< amount 0) (= kinds-of-coins 0)) 0)                                                                                                        
        (1 (+ (cc amount                                                                                                                               
                     (- kinds-of-coins 1))                                                                                                                
                 (cc (- amount                                                                                                                            
                        (first-denomination kinds-of-coins))
                     kinds-of-coins)))))
 
(defun (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50))) 
(count-change 100)     

#elif 0
(define substt ( lambda (x y z )  
    ( cond ((atom? z)  
            (cond ( (eq? z y) x )
                ( 't z )))
        ( else
            ( cons ( substt x y ( car z) ) 
                      ( substt x y ( cdr z ) )
            )
        )
    )
 ) )
(substt 'm 'b  '(a b ( a b c ) d))
#elif 0
(defn count-change ( amount)                                                                                                                         
  (cc amount 5)) 
(defn cc (amount kinds-of-coins)                                                                                                                        
  (cond ((= amount 0) 1)                                                                                                                                  
        ((or (< amount 0) (= kinds-of-coins 0)) 0)                                                                                                        
        (1 (+ (cc amount                                                                                                                               
                     (- kinds-of-coins 1))                                                                                                                
                 (cc (- amount                                                                                                                            
                        (first-denomination kinds-of-coins))
                     kinds-of-coins)))))
 
(defn first-denomination (kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50))) 
(count-change 100)     
#endif
(define (substt x y z )  
    ( cond ((atom z)  
            (cond ( (eq z y) x )
                ( 't z )))
        ( 't 
            ( cons ( substt x y ( car z) ) 
                      ( substt x y ( cdr z ) )
            )
        )
    )
 )
//(substt 'm 'b  '(a b ( a b c ) d))

