5
#if 1
Root 
"Control" namespace
 Bits Control
: sp ; //stack pause ;
sp
'x var
// d: "agoto" { "here" label { kbhit dup p } { "end" goto } { 1 p "here" goto } ifElse "end" label 2 p } word
// " agoto { " here label { kbhit dup p } { " end goto } { 1 p " here goto } ifElse " end label 2 p } word
// "aret" { "here" label { kbhit } { return } { 1 p "here" goto } ifElse 2 p } word
// " aret { " here label { kbhit } { return } { 1 p " here goto } ifElse 2 p } word
// x 10 = "abrkcon" { { { kbhit 27 == } { break } { 1 p continue } ifElse 2 p } loop } word

x 10 = 
: abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;
'abrkcon find wdiss sp
abrkcon
: abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;
pwi abrk0
//pause
nl 10 abrk0 sp 


#if 0 // kbhit needs to be adjusted for these to work
: abrk ( | x ) x 0 = { { kbhit 0 > x @ 10 > || } { break } { x @ p } ifElse  } loop ; d: abrk 
: abrk2 { { kbhit 27 == } { break } { 1 p } ifElse 2 p } loop 5 p ;
: abrk3 { 1 } { 1 p } { 0 p } ifElse 2 p ;
: abrk4 { { kbhit 0 > } { break } { continue } ifElse  } loop nl "ok" ps ;
: abrk5 { { kbhit 0 > } { return } { continue } ifElse  } loop nl "ok" ps ;
: abrk6 x 10 = nl "Hit any key : " ps { { kbhit 0 > } { { x @ 0 == } { break } { x 1 -= } ifElse decimal x @ p } { continue } ifElse  } loop nl "ok" ps ;
#endif
sp
: leaving ( str n j ) s "leaving" ps str @ ps "n =" ps n @ p "j = " ps j @ p s ;

: ct00 ( n | j ) 
    { j 1 = } { j @ n @ <= } { j ++ }
    {
       n @ p j @ p 
    }
    for
;
'ct00 find wdiss
17 ct00 
sp
: ct0 ( n | j ) 
    nl "ct0 : " ps nl
    { 
        label: test1 
        "ct0 before goto/label works" ps nl 
        goto: leave 
    } _
    { j 1 = } { j @ n @ <= } { j ++ }
    {
       n @ p j @ p 
       { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse
    }
    for
    label: leave 
    "ct0" n @ j @ leaving
;
'ct0 find wdiss //pause
17 ct0 
sp
: ct1 ( n | j ) 
    nl "ct1 : " ps nl
    { j 1 = } { j @ n @ <= } { j ++ }
    {
       n @ p j @ p
       { n @ j @ == } { nl "testing ct1 : goto/label1 ->" ps goto: hi } { "continuing ct1" ps } ifElse
    }
    for
    { { { label: hi "ct1 after nested goto/label1 works" ps nl return } _ } _ } _
;
//'ct1 find wdiss
17 ct1
sp
: ct2 
    nl "ct2 : " ps nl
    { nl "testing ct2 : goto/label2 ->" ps goto: hi } ix
    { label: hi "ct2 after goto/label2 works" ps nl return } _
;
//'ct2 find wdiss
ct2
: hic2 ( n ) 
    nl "hic2 : start " ps nl
    s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p 
    nl "hic2 : done " ps nl 
;
'hic2 find wdiss
3 hic2 //pause
#if 1 //dbOn @ not
7 hic2
#endif
: maybePause ; //pause ;
Compiler Logic User

: caseSwitchExample ( n ) 
    case ( 1 ) { nl 1 p } 
    case ( '1 ) { nl "'1" ps } 
    case '2 { nl 2 p } 
    case '3 { nl 3 p } 
    case 3 { nl 3 p } 
    case 77 { nl 77 p } 
    case 'seven { nl 7 p } 
    case ( 'eight ) { nl 8 p } 
    case ( "nine" ) { nl 9 p } 
    //match ( n @ ) // either or ...
    n @ switch
; 
sp
//' caseSwitchExample find wdiss
'seven caseSwitchExample 
'3 caseSwitchExample  
'2 caseSwitchExample  
'1 caseSwitchExample 
1 caseSwitchExample 
77 caseSwitchExample 
"seven" caseSwitchExample 
"nine" caseSwitchExample 
'nine caseSwitchExample 
'eight caseSwitchExample 
maybePause 
nl
cOn
void
csMatchEx ( n )
{
    match ( n )
    {
        case '1 { nl p (1) ; } 
        case '2 { nl p (2) ; } 
        case '3 { nl p (3) ; } 
        case 3 { nl p (3) ; } 
        case 77 { nl p (77) ; } 
        case 'seven { nl p (7) ; } 
        case 'eight { nl p (8) ; } 
        case 'nine { nl p (9) ; } 
    } 
}
//pwi csMatchEx
csMatchEx ( 'seven ) ;
csMatchEx ( "seven" ) ;
csMatchEx ( '3 ) ;
csMatchEx ( '2 ) ;
csMatchEx ( '1 ) ;
csMatchEx ( 77 ) ;
csMatchEx ( 3 ) ;
csMatchEx ( 'eight ) ;
csMatchEx ( 'nine ) ;
csMatchEx ( '77 ) ; // should not match : string != int
maybePause
nl
void
csMatchExWithReturn ( n | x rtn )
{
    x = 1111 ;
    match ( n ) // syntax supports either with or without parentheses
    {
        case '1 { nl ; p (1) ; rtn = x ; } 
        case '2 { nl ; p (2) ; rtn = n ; } 
        case '3 { nl ; p (3) ; rtn = x ; } 
        case 3 { nl ; p (3) ; rtn = n ; } 
        case 77 { nl ; p (77) ; rtn = n ; } 
        case 'seven { nl ; p (7) ; rtn = n ; } 
        case 'eight { nl ; p (8) ; rtn = n ; } 
        case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; } 
        case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; } 
        case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; } 
    } 
    p ( x - 103 ) ;
    return rtn ;
}
pwi csMatchExWithReturn
csMatchExWithReturn ( '1 ) ; p ;
csMatchExWithReturn ( 'seven ) ; ps
csMatchExWithReturn ( "seven" ) ; ps
csMatchExWithReturn ( '3 ) ; p
csMatchExWithReturn ( '2 ) ; ps
csMatchExWithReturn ( 77 ) ; p
csMatchExWithReturn ( 3 ) ; p
csMatchExWithReturn ( 'eight ) ; ps
csMatchExWithReturn ( "nine" ) ; p
csMatchExWithReturn ( 'nine ) ; p
nl
csMatchExWithReturn ( '77 ) ; p // should not match : string != int
cOff
maybePause

: t0 1 2 > if_ 1 p jmpHere 2 p ; 
: t1 1 2 > if_ 1 p _else_ 2 p _fi ; 
//: t2 1 2 > if_ 1 p jmp jmpHere 2 p _fi jmpHere ; 
: t3 1 2 > if_ 1 p _else_ 2 p _fi ; 
nl t0 t1 t3 
"\nlast line should show : 2 2 2" ps 
//pause
#endif 
sp
2 + 7 assertStkChk // stack checking
