verbosity 1 =
//typecheckOff
Int lcOn
(( lambda ( x y ) ( + x y ) ) 3 4 ) 
(define yfac (lambda (yy n) (if (< n 2) 1 (* n (yy yy (- n 1))))))
(yfac yfac 10) nl
(define yfacc (lambda (yyy n1) (if (< n1 2) (1) (* n1 (yyy yyy (- n1 1)))))) 
(yfacc yfacc 10) nl //pause
(yfacc yfacc 7) nl 
(definec fibc (lambda ( n ) (ifc (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
pwi fibc
"\nfibc 30 = " ps
(fibc 30)
#if 1   
//d: (define (fibc1 n ) (if (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2)))))
//d: (define fibc1 ( lambda ( n ) (ifc (< n 2) (n) ( + (fibc1 (- n 1)) (fibc1 (- n 2)) ) ) ) )
(definec fibc1 ( lambda ( n ) (ifc (< n 2) n ( + (fibc1 (- n 1)) (fibc1 (- n 2)) ) ) ) )
pwi fibc1
"\nfibc1 30 = " ps
(fibc1 3) 
//pause
#endif    
lcOff 
#if doLispTest @ // from sicp
lcOn
//bnOn
bnInit ( 32 )
//(define (abs n) (cond (( < n 0 ) (- 0 n)) n )) 
(define (abs n) (cond ( < n 0 ) (- 0 n) n )) 
( abs -9)
( abs 9)
(define (square n) (* n n))
(define (average x y) ( / (+ x y) 2 ))  
(define (improve guess x) (average guess (/ x guess)))    
(define (good-enough? guess x) ( < ( abs ( - (square guess) x)) 0.00000000001))  
//( ld: ) 
(define (sq-iter guess x) (if (good-enough? guess x) guess (sq-iter (improve guess x ) x )))    
( define (sqrt x) ( sq-iter 1.0 x))
(sqrt 9) 
(sqrt 2) 
(sqrt (sqrt (sqrt 9) ))
bnOff
(define (fib n)
  (fib-iter 1 0 n))

(define (fib-iter a b count)
  (if (= count 0)
      b
      (fib-iter (+ a b) a (- count 1))))
//pwi fib-iter
(fib 30)           
(define ( A x y) 
    (cond 
        (( = y 0 ) 0 )
        (( = x 0 ) (* 2 y))
        ((= y 1) 2 )
        ( 1 (A ( - x 1) ( A x ( - y 1) ) ) )
    )
)    
( A 1 10) (A 2 4) (A 3 3)
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

(A 1 10) (A 2 4) (A 3 3)

(define (f n) (A 0 n))

(define (g n) (A 1 n))

(define (h n) (A 2 n))

(define (k n) (* 5 n n))

(define (tx x)  
    (cond 
        (( = x 0 ) 1) 
        2 
    )
)      
(tx 3) (tx 0)
(define (count-change amount)
  (cc amount 5))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (= kinds-of-coins 0)) 0)
        (else (+ (cc amount
                     (- kinds-of-coins 1))
                 (cc (- amount
                        (first-denomination kinds-of-coins))
                     kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))

(count-change 100)            
(fib 30)         
(define (divides? a b)
  (= (remainder b a) 0))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (prime? n)
  (= n (smallest-divisor n)))
(prime? 13)            
(prime? 100)            
#if 0
(define (fib2 n)
  (fib-iter2 1 0 0 1 n))

(define (fib-iter2 a b p q count)
  (cond ((= count 0) b)
        ((even? count)
         (fib-iter a
                   b
                   ;;;??FILL-THIS-IN?? ; compute p'
                   ;;;??FILL-THIS-IN?? ; compute q'
                   (/ count 2)))
        (else (fib-iter (+ (* b q) (* a q) (* a p))
                        (+ (* b p) (* a q))
                        p
                        q
                        (- count 1)))))

(fib2 30)
;;;SECTION 1.2.5
#endif    
#endif
"\ncsl : scheme/lisp : type \'x\' or \'exit\' or \'bye\' to exit ...\n" ps
            